// Parent component// reafactored to use property initializers// https://www.fullstackreact.com/articles/use-property-initializers-for-cleaner-react-components/class ProductList extends React.Component {  // constructor(props) {  //   super(props);  //  //   this.state = {  //     products: [],  //   };  //  //   //this.handleProductUpVote = this.handleProductUpVote.bind(this);  // }  state = {      products: [],  };  componentDidMount() {    // after mounting popluate state with data from seed    this.setState({ products: Seed.products });  }//  handleProductUpVote(productId) {  handleProductUpVote = (productId) => {    const nextProducts = this.state.products.map((product) => {      /*        check if the current product matches productId. If it does,        we create a new object, copying over the properties from        the original product object. We then overwrite the votes        property on our new product object. We set it to the        incremented vote count.      */      if (product.id === productId) {        return Object.assign({}, product, {          votes: product.votes + 1,        });      } else {        // If the current product is not the one specified by productId, we return it unmodified        return product;      }    });    this.setState({      products: nextProducts,    });  };  render() {    const products = this.state.products.sort((a, b) => (
      b.votes - a.votes
    ));    // Seed comes from index.html including seed.js    const productComponents = products.map((product) => (        // Product is actually the "call" to the Product component below        <Product          key={'product' + product.id}          id={product.id}          title={product.title}          description={product.description}          url={product.url}          votes={product.votes}          submitterAvatarUrl={product.submitterAvatarUrl}          productImageUrl={product.productImageUrl}          onVote={this.handleProductUpVote}        />    ));    // map creates an array of objects containg individual product details    return (      <div className="ui unstackable items">        {productComponents}      </div>    );  }}// Child or ProductListclass Product extends React.Component {  constructor(props) {    super(props);    //this.handleUpVote = this.handleUpVote.bind(this);  }  handleUpVote = () => (    this.props.onVote(this.props.id)  );  // handleUpVote() {  //   //console.log('the id ' +this.props.id);  //   this.props.onVote(this.props.id);  // }  render() {    // populate data with the    return (      <div className='item'>        <div className='image'>          <img src={this.props.productImageUrl} />        </div>        <div className='middle aligned content'>          <div className='header'>            <a onClick={this.handleUpVote}>              <i className='large caret up icon' />            </a>            {this.props.votes}          </div>           <div className='description'>            <a href={this.props.url}>              {this.props.title}            </a>            <p>{this.props.description}</p>          </div>          <div className='extra'>            <span>Submitted by:</span>            <img              className='ui avatar image'              src= {this.props.submitterAvatarUrl}            />          </div>        </div>      </div>    );  }}ReactDOM.render(  <ProductList />,  document.getElementById('content'));